#################################################################################
#   Onebranch Pipelines - Buddy MSBuild (CDPXMigrated)                          #
# This pipeline was created by EasyStart from a sample located at:              #
#   https://aka.ms/obpipelines/easystart/samples                                #
# Documentation:  https://aka.ms/obpipelines                                    #
# Yaml Schema:    https://aka.ms/obpipelines/yaml/schema                        #
# Retail Tasks:   https://aka.ms/obpipelines/tasks                              #
# Support:        https://aka.ms/onebranchsup                                   #
#################################################################################

trigger: none # https://aka.ms/obpipelines/triggers

parameters: # parameters are shown up in ADO UI in a build queue time
- name: 'debug'
  displayName: 'Enable debug output'
  type: boolean
  default: false

variables:
  CDP_DEFINITION_BUILD_COUNT: $[counter('', 0)] # needed for onebranch.pipeline.version task https://aka.ms/obpipelines/versioning
  system.debug: ${{ parameters.debug }}
  ENABLE_PRS_DELAYSIGN: 0
  ROOT: $(Build.SourcesDirectory)
  REPOROOT: $(Build.SourcesDirectory)
  OUTPUTROOT: $(REPOROOT)\out
  CDP_USER_SOURCE_FOLDER_CONTAINER_PATH: $(Build.SourcesDirectory)
  CDP_DEFINITION_BUILD_COUNT_DAY: $[counter(format('{0:yyyyMMdd}', pipeline.startTime), 1)]
  CDP_DEFINITION_BUILD_COUNT_MONTH: $[counter(format('{0:yyyyMM}', pipeline.startTime), 1)]
  CDP_DEFINITION_BUILD_COUNT_YEAR: $[counter(format('{0:yyyy}', pipeline.startTime), 1)]
  NUGET_XMLDOC_MODE: none

  WindowsContainerImage: 'cdpxwin1809.azurecr.io/global/obinfra/windows/1809/vs2019:latest' # Docker image which is used to build the project https://aka.ms/obpipelines/containers

resources:
  repositories:
    - repository: templates
      type: git
      name: OneBranch.Pipelines/GovernedTemplates
      ref: refs/heads/main

extends:
  template: v2/OneBranch.NonOfficial.CrossPlat.yml@templates # https://aka.ms/obpipelines/templates
  parameters:
    globalSdl: # https://aka.ms/obpipelines/sdl
      tsa:
        enabled: false # onebranch publish all sdl results to TSA. If TSA is disabled all SDL tools will forced into 'break' build mode.
      # credscan:
      #   suppressionsFile: $(Build.SourcesDirectory)\.config\CredScanSuppressions.json
      binskim:
        break: true # always break the build on binskim issues. You can disable it by setting to 'false'
      policheck:
        break: true # always break the build on policheck issues. You can disable it by setting to 'false'
      # baseline:
      #   baselineFile: $(Build.SourcesDirectory)\.gdn\global.gdnbaselines
      cg:
        failOnAlert: false

    stages:
    - stage: build
      jobs:
      - job: main
        pool:
          type: windows  # read more about custom job pool types at https://aka.ms/obpipelines/yaml/jobs

        variables: # More settings at https://aka.ms/obpipelines/yaml/jobs
          ob_outputDirectory: '$(REPOROOT)\out' # this directory is uploaded to pipeline artifacts, reddog and cloudvault. More info at https://aka.ms/obpipelines/artifacts
          ob_sdl_binskim_break: true # https://aka.ms/obpipelines/sdl
          # ob_sdl_baseline_baselineFile: $(Build.SourcesDirectory)\.gdn\build.nonofficial.gdnbaselines
          # ob_sdl_codeSignValidation_excludes: -|**\*.js # Example -|**\*.js;-|**\Test*\**
          ob_artifactBaseName: 'drop'
          ob_sdl_cg_failOnAlert: false

        steps:
          - task: onebranch.pipeline.version@1 # generates automatic version. For other versioning options check https://aka.ms/obpipelines/versioning
            displayName: 'Setup BuildNumber'
            inputs:
              system: 'RevisionCounter'
              major: '1'
              minor: '0'
              exclude_commit: true

          - task: CmdLine@2
            displayName: 'NPM Install'
            inputs:
              script: '$(Build.SourcesDirectory)\.pipelines\onebranch_run_ps.cmd restore.ps1'
              workingDirectory: '$(Build.SourcesDirectory)'

          # Commands to run during the build stage.
          - task: CmdLine@2
            displayName: 'Build'
            inputs:
              script: '$(Build.SourcesDirectory)\.pipelines\onebranch_run_ps.cmd build.ps1'
              workingDirectory: '$(Build.SourcesDirectory)'

          # Signing the files created by the build script
          - task: onebranch.pipeline.signing@1
            displayName: 'Sign binaries'
            inputs:
              command: 'sign'
              signing_environment: 'azure-ado'
              signing_profile: 'internal_azure_service'
              files_to_sign: 'dist\**\*;README.md;package.json;*.md'
              search_root: '$(Build.SourcesDirectory)'

          # Commands to run during the packaging stage.
          - task: CmdLine@2
            displayName: 'Package'
            inputs:
              script: '$(Build.SourcesDirectory)\.pipelines\onebranch_run_ps.cmd package.ps1'
              workingDirectory: '$(Build.SourcesDirectory)'

          # Signing the files created by the packaging script
          - task: onebranch.pipeline.signing@1
            displayName: 'Sign binaries'
            inputs:
              command: 'sign'
              signing_environment: 'azure-ado'
              signing_profile: 'internal_azure_service'
              files_to_sign: '**/*.tgz'
              search_root: '$(Build.SourcesDirectory)'

          # Copying build artifacts to the Output folder.
          - task: CopyFiles@2
            displayName: 'Copy Dist to Output folder'
            inputs:
              Contents: |
                $(Build.SourcesDirectory)\README.md
                $(Build.SourcesDirectory)\LICENSE.txt
                !$(Build.SourcesDirectory)\node_modules\**
              TargetFolder: '$(OUTPUTROOT)\outputs\build\build_artifacts'

          # Copying build artifacts to the Output folder.
          - task: CopyFiles@2
            displayName: 'Copy Dist to Output folder'
            inputs:
              SourceFolder: '$(Build.SourcesDirectory)'
              Contents: |
                $(Build.SourcesDirectory)\dist\**
                $(Build.SourcesDirectory)\package.json
                !$(Build.SourcesDirectory)\node_modules\**
              TargetFolder: '$(OUTPUTROOT)\outputs\build\build_artifacts'

          # Copying source artifacts to the Output folder.
          - task: CopyFiles@2
            displayName: 'Copy source to Output folder'
            inputs:
              Contents: |
                $(Build.SourcesDirectory)\**
                $(Build.SourcesDirectory)\*.md
                $(Build.SourcesDirectory)\LICENSE.txt
                !.git/**/*
                !$(Build.SourcesDirectory)\dist\**
                !$(Build.SourcesDirectory)\package-lock.json
                !$(Build.SourcesDirectory)\node_modules\**
                !$(Build.SourcesDirectory)\*.tgz
              TargetFolder: '$(OUTPUTROOT)\outputs\build\source'

          # Copying tgz packages to the Output folder.
          - task: CopyFiles@2
            displayName: 'Copy tar-package to Output folder'
            inputs:
              SourceFolder: '$(Build.SourcesDirectory)'
              Contents: |
                $(Build.SourcesDirectory)\*.tgz
              TargetFolder: '$(OUTPUTROOT)\outputs\package\tgz-package'
